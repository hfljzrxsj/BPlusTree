
      // setMaxpageIndex(Math.ceil(store.users.length / numInEveryPage) - 1);
      // if (maxpageIndex === 0) {
      //   setPagesButtonRightHidden(true);
      // }
      // if (pageIndex === 0) {
      //   setPagesButtonLeftHidden(true);
      // }
      // else {
      //   setPagesButtonLeftHidden(false);
      // }
      // if (pageIndex === maxpageIndex) {
      //   setPagesButtonRightHidden(true);
      // }
      // else {
      //   setPagesButtonRightHidden(false);
      // }

      // const table: Array<JSX.Element> = [];
      // store.users.forEach((item, index) => {
      //   const id = item.id;
      //   if (index < pageIndex * numInEveryPage || index > pageIndex * numInEveryPage + numInEveryPage - 1) return;
      //   table.push(
      //     <tr key={item.id}>
      //       <td style={{ display: 'none' }}>{item.id}</td>
      //       <td>{editableRowId === id ? <input
      //         type="text"
      //         defaultValue={item.username}
      //       /> : item.username}</td>
      //       <td>{editableRowId === id ? <input
      //         type="text"
      //         defaultValue={item.password}
      //       /> : item.password}</td>
      //       <td>{item.permission}</td>
      //       <td>
      //         {editableRowId === id ? (
      //           <button onClick={() => setEditableRowId(id)}>{'保存'}</button>
      //         ) : (
      //           <button onClick={d => {
      //             setEditableRowId(null);
      //             const e = d.target;
      //             if (!(e instanceof HTMLButtonElement)) return;
      //             const result = inputNotNull(e, 1);
      //             if (!result) {
      //               return;
      //             }
      //             const [name, password] = result;
      //             fetch('http://127.0.0.1:5000/api/update', {
      //               method: 'POST',
      //               headers: {
      //                 'Content-Type': 'application/json'
      //               },
      //               body: JSON.stringify({
      //                 id,
      //                 username: name,
      //                 password,
      //                 permission: 0
      //               })
      //             }).then(e => e.json()).then(e => {
      //               if (e.code === 400) {
      //                 handleToastOpen({ severity: 'warning', alertText: '已存在相同用户名' });
      //                 return;
      //               }
      //               handleToastOpen({ severity: 'success', alertText: '修改成功' });
      //               // eslint-disable-next-line no-use-before-define
      //               tableFetch();
      //             }).catch(() => {
      //               handleToastOpen({ severity: 'error', alertText: '修改失败' });
      //             });
      //           }}>{'编辑'}</button>
      //         )}<Button onClick={() => (setDelId(id), setDialogOpen(true))}>{'删除'}</Button>
      //       </td>
      //     </tr>
      //   );
      // });
      // table.push(
      //   <tr>
      //     <td><TextField
      //       label="请输入用户名"
      //       variant="outlined"
      //     /></td>
      //     <td><TextField
      //       label="请输入密码"
      //       variant="outlined"
      //     /></td>
      //     <td>{selectStr}</td>
      //     <td><button onClick={d => {
      //       const e = d.target;
      //       if (!(e instanceof HTMLButtonElement)) return;
      //       const result = inputNotNull(e, 0);
      //       if (!result) {
      //         return;
      //       }
      //       const [name, password] = result;

      //       fetch('http://127.0.0.1:5000/api/add', {
      //         method: 'POST',
      //         headers: {
      //           'Content-Type': 'application/json'
      //         },
      //         body: JSON.stringify({
      //           // id: id.value,
      //           password,
      //           username: name,
      //           // permission: permission.value
      //           permission: 1
      //         })
      //       }).then(e => e.json()).then(e => {
      //         if (e.code !== 200) {
      //           handleToastOpen({ severity: 'warning', alertText: '已存在相同用户名' });
      //           return;
      //         }
      //         handleToastOpen({ severity: 'success', alertText: '添加成功' });
      //         // eslint-disable-next-line no-use-before-define
      //         tableFetch();
      //       }).catch(() => {
      //         handleToastOpen({ severity: 'error', alertText: '添加失败' });
      //       });
      //     }}>{'添加'}</button></td>
      //   </tr>);
      // setTimeout(() => {
      //   setTable(store.users);
      //   if (pageIndex > maxpageIndex) {
      //     setPageIndex(maxpageIndex);
      //   }
      // });
      // setTimeout(() => {
      //   loadContent();
      // });
  

      // fetch('http://127.0.0.1:5000/api/login', {
    //   method: 'POST'
    //   , headers: {
    //     'Content-Type': 'application/json'
    //   }
    //   , body: JSON.stringify({
    //     username: 'admin',
    //     password: '123456',
    //     remember: 1
    //   })
    //   // eslint-disable-next-line no-console
    // }).then(e => e.json()).catch(e => console.log(e));

      // const [pageIndex, setPageIndex] = useState(0);
  // const [maxpageIndex, setMaxpageIndex] = useState(0);

  // const numInEveryPage = 5;
  // const selectStr = '普通用户';
  // const checkString = (str: string, reg: RegExp) => {
  //   return !reg.test(str);
  // };


  // const loadContent = useCallback(() => {
  // const inputNotNull = (e: HTMLButtonElement, startIndex: number) => {
  //   const td = e?.parentNode?.parentNode?.querySelectorAll('td');
  //   if (!td) return false;
  //   // const id = td[0].querySelector('input')
  //   const name = td[startIndex]?.querySelector('input');
  //   const password = td[startIndex + 1]?.querySelector('input');
  //   if (!name || !password) return false;
  //   // const permission = td[startIndex+2].querySelector('select')
  //   if (name.value === '') {
  //     handleToastOpen({ severity: 'warning', alertText: '姓名不能为空' });
  //     name.focus();
  //     return false;
  //   }
  //   if (password.value === '') {
  //     handleToastOpen({ severity: 'warning', alertText: '密码不能为空' });
  //     password.focus();
  //     return false;
  //   }
  //   if (checkString(password.value, /^[!#$&(-,.0-:<-[\]^`-~-]+$/)) {
  //     handleToastOpen({ severity: 'warning', alertText: '密码格式不正确' });
  //     password.focus();
  //     return false;
  //   }
  //   return [
  //     // id.value,
  //     name.value,
  //     password.value,
  //     // permission.value
  //   ];
  // };


// type T = {
//   users: {
//     id: number;
//     username: string;
//     password: string;
//     permission: number;
//   }[]
// };

// function save(id: number, d: React.MouseEvent<HTMLButtonElement, MouseEvent>) {
  //   setEditableRowId(null);
  //   const e = d.target;
  //   if (!(e instanceof HTMLButtonElement)) return;
  //   const result = inputNotNull(e, 1);
  //   if (!result) {
  //     return;
  //   }
  //   const [name, password] = result;
  //   fetch('http://127.0.0.1:5000/api/update', {
  //     method: 'POST',
  //     headers: {
  //       'Content-Type': 'application/json'
  //     },
  //     body: JSON.stringify({
  //       id,
  //       username: name,
  //       password,
  //       permission: 0
  //     })
  //   }).then(e => e.json()).then(e => {
  //     if (e.code === 400) {
  //       handleToastOpen({ severity: 'warning', alertText: '已存在相同用户名' });
  //       return;
  //     }
  //     handleToastOpen({ severity: 'success', alertText: '修改成功' });
  //     tableFetch();
  //   }).catch(() => {
  //     handleToastOpen({ severity: 'error', alertText: '修改失败' });
  //   });
  // }


  // const del = useCallback(() => {
  //   fetch('http://127.0.0.1:5000/api/delete', {
  //     method: 'DELETE',
  //     headers: {
  //       'Content-Type': 'application/json'
  //     },
  //     body: JSON.stringify({ id: delId })
  //   }).then(e => e.json()).then(e => {
  //     if (e.code === 200) {
  //       handleToastOpen({ severity: 'success', alertText: '删除成功' });
  //       tableFetch();
  //     }
  //     else {
  //       handleToastOpen({ severity: 'error', alertText: '删除失败' });
  //     }
  //   }).catch(() => {
  //     handleToastOpen({ severity: 'error', alertText: '删除失败' });
  //   });
  // }, [delId, tableFetch]);
  

          {/* <table
        className={styleModule['table']}
      >
        <caption align="top">
          <h1>{'用户管理'}</h1>
        </caption>
        <tr>
          <th>{'工号'}</th>
          <th>{'用户名'}</th>
          <th>{'密码'}</th>
          <th>{'权限'}</th>
          <th>{'操作'}</th>
        </tr>
        {table}
      </table>
      <div>
        <button
          className="page"
          style={{ visibility: pagesButtonLeftHidden ? 'hidden' : 'visible' }}
          onClick={() => {
            if (pageIndex === 0) return;
            setPageIndex(pageIndex - 1);

            loadContent();
          }}
        >{'上一页'}</button>
        <span>{'第'}<strong>{pageIndex}</strong>{'页'}</span>
        <button
          className="page"
          style={{ visibility: pagesButtonRightHidden ? 'hidden' : 'visible' }}
          onClick={() => {
            if (pageIndex === maxpageIndex) return;
            setPageIndex(pageIndex + 1);
            loadContent();
          }}>{'下一页'}
        </button>
      </div> */}
      
        // const handleChange = (event: SelectChangeEvent) => {
  //   setModel(Number(event.target.value));
  //   fetch('api/model', {
  //     method: 'POST',
  //     headers: {
  //       'Content-Type': 'application/json',
  //     },
  //     body: JSON.stringify({ model: Number(event.target.value) }),
  //   }).then((response) => response.json()).then(() => {
  //     handleToastOpen({ severity: 'success', alertText: '模型切换成功' });
  //   }).catch(() => {
  //     handleToastOpen({ severity: 'error', alertText: '模型切换失败' });
  //   });
  // };

    // const upload = () => {
  //   setIsHidden(true);
  //   if (!fileRef?.current?.value) {
  //     // toggle('请先选择文件');
  //     handleToastOpen({ severity: 'error', alertText: '请先选择文件' });
  //     return;
  //   }
  //   setIscircleParentHidden(true);
  //   setButtonIsDisabled(true);
  //   const formData = new FormData();
  //   if (!fileRef?.current?.files) return;
  //   const file = fileRef.current.files[0];
  //   if (file) {
  //     formData.append('file', file);
  //   }

  //   fetch('api/file', {
  //     method: 'POST',
  //     body: formData
  //   }).then(e => e.json()).then(e => {
  //     setIsHidden(false);
  //     const ReceivedResult: ReceivedResultType[] = [];
  //     // toggle('上传成功');
  //     handleToastOpen({ severity: 'success', alertText: '上传成功' });
  //     for (let i = 0; i < e.dcm_filenames.length; i++) {
  //       ReceivedResult.push({ filePath: e.dcm_filenames[i].replace('\\', '/'), Artifact: e.predictoutput[i][0], checked: false });
  //     }
  //     setReceivedResult([...ReceivedResult]);

  //   }).catch(() => {
  //     handleToastOpen({ severity: 'error', alertText: '对不起, 上传失败' });
  //   }).then(() => {
  //     setIscircleParentHidden(false);
  //     setButtonIsDisabled(false);
  //   });
  // };